<?php

declare(strict_types=1);

namespace Plugin\landswitcher\Models;

use Exception;
use JTL\Model\DataAttribute;
use JTL\Model\DataModel;
use JTL\DB\DbInterface;
use Illuminate\Support\Collection;

/**
 * Class ModelItem
 * This class is generated by shopcli model:create
 *
 * @package Plugin\jtl_test
 * @property int    $id
 * @method int getId()
 * @method void setId(int $value)
 * @property string $slug
 * @method string getSlug()
 * @method void setSlug(string $slug)
 * @property string $description
 * @method string getDescription()
 * @method void setDescription(string $description)
 * @property string $name
 * @method string getName()
 * @method void setName(string $name)
 */
final class ModelRedirect extends DataModel
{
    /**
     * @inheritdoc
     */

    public array $arCountries = [];

    public function getTableName(): string
    {
        return 'landswitcher_redirects';
    }

    /**
     * Setting of keyname is not supported!
     * Call will always throw an Exception with code ERR_DATABASE!
     * @inheritdoc
     */
    public function setKeyName($keyName): void
    {
        throw new Exception(__METHOD__ . ': setting of keyname is not supported', self::ERR_DATABASE);
    }

    public function getAttributes(): array
    {
        static $attributes = null;
        if ($attributes === null) {
            $attributes = [];

            $id = DataAttribute::create('id', 'int', null, false, true);
            $id->getInputConfig()->setModifyable(false);
            $attributes['id'] = $id;

            $attributes['url'] = DataAttribute::create('url', 'varchar', null, false, false);
            $attributes['country'] = DataAttribute::create('country', 'varchar', null, false, false);
        }

        return $attributes;
    }
    
    private static function getCountries(DbInterface $db):array
    {
        $arCountries = [];
        foreach(ModelCountry::loadAll($db, [], []) as $countryItem) $arCountries[$countryItem->CISO] = $countryItem->name;
        return $arCountries;
    }

    public static function loadAll(DbInterface $db, $key, $value): Collection
    {
        $result = parent::loadAll($db, $key, $value);

        $arCountries = self::getCountries($db);
        
        foreach($result as $rez) $rez->country = $arCountries[$rez->country];
        //print_r($result);
        //die();
        return $result;
    }

    public static function load($attributes, DbInterface $db, $option = self::ON_NOTEXISTS_NEW)
    {
        $result = parent::load($attributes, $db, $option);
        $arCountries = self::getCountries($db);
        $result->arCountries = $arCountries;
        
        return $result;
    }
       
}
